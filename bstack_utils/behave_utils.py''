import threading
import logging

import bstack_utils.accessibility as a11y
from bstack_utils.helper import get_thread_value_or_default

logger = logging.getLogger(__name__)

def is_key_present_in_thread_object(key_name):
  return True if key_name in threading.current_thread().__dict__.keys() else False

def start_a11y_behave(context, *args):
    tags = getattr(args[0], 'tags', [])
    is_a11y = a11y.is_enabled_testcase(tags)
    threading.current_thread().isA11yTest = is_a11y
    try:
      current_driver = threading.current_thread().bstackSessionDriver if is_key_present_in_thread_object('bstackSessionDriver') else context.browser
      if current_driver and current_driver.session_id and is_a11y and get_thread_value_or_default(
              threading.current_thread(), 'a11yPlatform', None):
          threading.current_thread().isA11yTest = a11y.start_test_capture(current_driver, is_a11y)
    except Exception as e:
       logger.debug('Failed to start a11y in behave: {}'.format(str(e)))

def stop_a11y_behave(current_driver):
    if get_thread_value_or_default(threading.current_thread(), 'isA11yTest', None) and get_thread_value_or_default(
      threading.current_thread(), 'a11yPlatform', None) and not get_thread_value_or_default(threading.current_thread(), 'a11y_stop', False):
      threading.current_thread().a11y_stop = True
      a11y.stop_test_capture(current_driver, name="", path="")
