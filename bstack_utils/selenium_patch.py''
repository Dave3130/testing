class SeleniumPatch:
    def __init__(self, handler):
        self._orig_execute = None
        self.handler = handler
        self._webdriver_class = self.get_webdriver()
        self.patch()

    def patch(self):
        self._orig_execute = self._webdriver_class.execute
        self._webdriver_class.execute = self.get_execute()

    def get_execute(self):
        def execute(this, driver_command, *args, **kwargs):
            self.handler("before", driver_command, None, this, args)
            response = self._orig_execute(this, driver_command, *args, **kwargs)
            self.handler("after", driver_command, response)
            return response

        return execute

    def reset(self):
        self._webdriver_class.execute = self._orig_execute

    @staticmethod
    def get_webdriver():
        from selenium.webdriver.remote.webdriver import WebDriver
        return WebDriver
