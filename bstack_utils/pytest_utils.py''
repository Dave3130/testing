import re

from bstack_utils.session_utils import store_test_status


def hook_name_from_fixture_name(fixture_name):
    if fixture_name.startswith('_xunit_setup_function_fixture'):
        return 'setup-function'
    elif fixture_name.startswith('_xunit_setup_module_fixture'):
        return 'setup-module'
    elif fixture_name.startswith('_xunit_teardown_function_fixture'):
        return 'teardown-function'
    elif fixture_name.startswith('_xunit_teardown_function_fixture'):
        return 'teardown-module'


def is_fixture_a_hook(fixture_name):
    return bool(re.match('^_xunit_(setup|teardown)_(function|module)_fixture_.*', fixture_name))


def is_fixture_a_module_hook(fixture_name):
    return bool(re.match('^_xunit_(setup|teardown)_module_fixture_.*', fixture_name))


def is_fixture_a_class_hook(fixture_name):
    return bool(re.match('^_xunit_(setup|teardown)_class_fixture_.*', fixture_name))


def hook_details_from_fixture_name(fixture_name):
    if fixture_name.startswith('_xunit_setup_function_fixture'):
        return 'setup-function', 'BEFORE_EACH'
    elif fixture_name.startswith('_xunit_setup_module_fixture'):
        return 'setup-module', 'BEFORE_ALL'
    elif fixture_name.startswith('_xunit_teardown_function_fixture'):
        return 'teardown-function', 'AFTER_EACH'
    elif fixture_name.startswith('_xunit_teardown_module_fixture'):
        return 'teardown-module', 'AFTER_ALL'

    return None, None


def repr_name_from_hook_name(hook_name):
    if hook_name in ['setup', 'teardown']:
        return hook_name.capitalize()

    return hook_name


def hook_type_from_hook_name(hook_name):
    if hook_name in ['setup_function', 'setup_method']:
        return 'BEFORE_EACH'
    elif hook_name in ['setup_module', 'setup_class']:
        return 'BEFORE_ALL'
    elif hook_name in ['teardown_function', 'teardown_method']:
        return 'AFTER_EACH'
    elif hook_name in ['teardown_module', 'teardown_class']:
        return 'AFTER_ALL'

    return hook_name


def bdd_scenario_name(node, scenario):
    if hasattr(node, 'callspec'):
        parts = node.nodeid.rsplit("[")
        params = parts[-1]
        return "{} [{}".format(scenario.name, params)
    return scenario.name


def bdd_examples(node):
    try:
        examples = []
        if hasattr(node, 'callspec'):
            examples = list(node.callspec.params['_pytest_bdd_example'].values())
        return examples
    except:
        return []


def bdd_test_tags(feature, scenario):
    return list(feature.tags) + list(scenario.tags)

def store_pytest_test_status(report):
    try:
        status = 'failed'
        if report.passed or (report.failed and hasattr(report, "wasxfail")):
            status = 'passed'
        elif report.skipped:
            status = 'skipped'

        store_test_status(status)
    except:
        pass

def store_pytest_bdd_test_status(status):
    try:
        updated_status = 'failed'
        if status == 'passed':
            updated_status = 'passed'
        elif status == 'skipped':
            updated_status = 'skipped'

        store_test_status(updated_status)
    except:
        pass

def mod_pytest_selenium_runtest_makereport(item=None, report=None, summary=None, extra=None):
    return
