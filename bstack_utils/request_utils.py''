import requests
from urllib.parse import urljoin, urlencode
from datetime import datetime
import os
import logging
import json
from bstack_utils.constants import ORCHESTRATION_API_URL

logger = logging.getLogger(__name__)

class RequestUtils:

    @staticmethod
    def results(builder,params=None):
        http_url = urljoin(builder, 'issues')
        if params:
            http_url += "?{}".format(urlencode({'test_run_uuid': params.get('test_run_uuid')}))
        return RequestUtils.assertion_request(http_url)

    @staticmethod
    def results_summary(builder,params=None):
        http_url = urljoin(builder, 'issues-summary')
        if params:
            http_url += "?{}".format(urlencode({'test_run_uuid': params.get('test_run_uuid')}))
        return RequestUtils.assertion_request(http_url)

    @staticmethod
    def assertion_request(req_url):
        jwt_token = os.environ.get('BS_A11Y_JWT', os.environ.get('BROWSERSTACK_TESTHUB_JWT', ''))
        headers = {'Authorization': 'Bearer {}'.format(jwt_token)}
        response = requests.get(req_url, headers=headers)
        response_obj = {}

        try:
            response_obj = response.json()
        except Exception as e:
            logger.debug("Failed to parse JSON response: {}".format(e))
            pass

        if response_obj is not None:
            response_obj['next_poll_time'] = response.headers.get('next_poll_time', str(int(datetime.now().timestamp() * 1000)))
            response_obj['status'] = response.status_code

        return response_obj
    
    @staticmethod
    def test_orchestration_split_tests(req_endpoint, data):
        logger.debug("Processing Request for testOrchestrationSplitTests")
        return RequestUtils.make_orchestration_request('POST', req_endpoint, data=data)

    @staticmethod
    def get_test_orchestration_ordered_tests(req_endpoint, data):
        logger.debug("Processing Request for getTestOrchestrationOrderedTests")
        res = RequestUtils.make_orchestration_request('GET', req_endpoint, data=data)
        return res
    
    @staticmethod
    def make_orchestration_request(method, req_endpoint, data=None, params=None, extra_headers=None):
        jwt_token = os.environ.get('BROWSERSTACK_TESTHUB_JWT', '')
        headers = {
            'authorization': 'Bearer {}'.format(jwt_token),
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        if extra_headers:
            headers.update(extra_headers)
        url = ORCHESTRATION_API_URL + "/" + req_endpoint.lstrip('/')
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params, json=data)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=data)
            elif method == 'PUT':
                response = requests.put(url, headers=headers, json=data)
            else:
                raise ValueError("Unsupported HTTP method: {}".format(method))
            logger.debug("Orchestration request made to URL: {} with method: {}".format(url, method))

            response_obj = {}
            try:
                response_obj = response.json()
            except Exception as e:
                logger.debug("Failed to parse JSON response: {} - {}".format(e, response.text))

            if response_obj is not None:
                response_obj['next_poll_time'] = response.headers.get(
                    'next_poll_time', str(int(datetime.now().timestamp() * 1000))
                )
                response_obj['status'] = response.status_code

            return response_obj
        except Exception as e:
            logger.error("Orchestration request failed: {} - {}".format(e, url))
            return None
    
    @staticmethod
    def put_failed_tests(req_url, data):
        """
        Sends a PUT request to store the failed tests
        """
        jwt_token = os.environ.get('BROWSERSTACK_TESTHUB_JWT', '')
        headers = {
            'authorization': 'Bearer {}'.format(jwt_token),
            'Content-Type': 'application/json'
        }
        response = requests.put(req_url, headers=headers, json=data)
        response_obj = {}

        try:
            response_obj = response.json()
        except Exception as e:
            logger.debug("Failed to parse JSON response: {}".format(e))
            pass

        logger.debug("RequestUtils: put_failed_tests response: {}".format(response_obj))

        if response_obj is not None:
            response_obj['next_poll_time'] = response.headers.get(
                'next_poll_time', str(int(datetime.now().timestamp() * 1000))
            )
            response_obj['status'] = response.status_code

        return response_obj
    
    @staticmethod
    def get_failed_tests(req_url):
        """
        Sends a GET request to get the count of failed tests
        """
        jwt_token = os.environ.get('BROWSERSTACK_TESTHUB_JWT', '')
        headers = {
            'authorization': 'Bearer {}'.format(jwt_token),
            'Content-Type': 'application/json'
        }
        response = requests.get(req_url, headers=headers)
        response_obj = {}

        try:
            response_obj = response.json()
            logger.debug("RequestUtils: get_failed_tests response: {}".format(response_obj))
        except Exception as e:
            logger.debug("Failed to parse JSON response: {} - {}".format(e, response.text))
            pass

        if response_obj is not None:
            response_obj['next_poll_time'] = response.headers.get(
                'next_poll_time', str(int(datetime.now().timestamp() * 1000))
            )
            response_obj['status'] = response.status_code

        return response_obj

    @staticmethod
    def post_collect_build_data(endpoint, payload):
        """
        Makes a POST request to the collect-build-data endpoint.

        Args:
            endpoint (str): The API endpoint path.
            payload (dict): The request payload.

        Returns:
            dict: Response from the API, or None if failed.
        """
        try:
            url = "{}/{}".format(ORCHESTRATION_API_URL, endpoint)
            jwt_token = os.environ.get('BROWSERSTACK_TESTHUB_JWT', '')
            headers = {
                'authorization': 'Bearer {}'.format(jwt_token),
                'Content-Type': 'application/json'
            }

            response = requests.post(url, json=payload, headers=headers, timeout=30)

            success_status_codes = [200, 202]
            if response.status_code in success_status_codes:
                return response.json()
            
            else:
                logger.error("Failed to collect build data. Status: {}, Response: {}".format(
                    response.status_code, response.text))
                return None

        except Exception as e:
            logger.error("Exception in post_collect_build_data: {}".format(e))
            return None
