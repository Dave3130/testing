import os
from urllib.parse import urlparse
from bstack_utils.config import Config
from bstack_utils.messages import PAC_PARSE_ERROR

global_config = Config.get_instance()


def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])  # Check if both scheme and netloc are present
    except:
        return False


def extract_proxy_details(pac_file_path, target_url):
    from pypac import get_pac
    from pypac import PACSession
    from pypac.parser import PACFile
    import socket
    if os.path.isfile(pac_file_path):
        # Read the PAC file content from the local file
        with open(pac_file_path) as f:
            pac = PACFile(f.read())
    elif is_valid_url(pac_file_path):
        # Read the PAC file content from the url file
        pac = get_pac(url=pac_file_path)
    else:
        raise Exception('Pac file does not exist: {}'.format(pac_file_path))
    session = PACSession(pac)
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        hostName = s.getsockname()[0]
        s.close()
    except:
        hostName = '0.0.0.0'
    proxy_url = session.get_pac().find_proxy_for_url(target_url, hostName)
    return proxy_url


def has_proxy_in_config(config):
    return 'httpProxy' in config or 'httpsProxy' in config


def get_proxy_if_exists(config):
    if not has_proxy_in_config(config):
        return
    if config.get('httpProxy'):
        return config.get('httpProxy')
    if config.get('httpsProxy'):
        return config.get('httpsProxy')


def get_proxy_map(config, target_url):
    proxy = get_proxy_if_exists(config)
    proxies = {}
    if config.get('httpProxy') or config.get('httpsProxy'):
        if proxy.endswith('.pac'):
            proxies = read_proxy_from_pac(proxy, target_url)
        else:
            proxies = {
                'https': proxy
            }
    global_config.set_property('proxySettings', proxies)
    return proxies


def read_proxy_from_pac(pac_file_path, target_url):
    proxies = {}
    global PAC_PROXY
    if 'PAC_PROXY' in globals():
        return PAC_PROXY
    try:
        proxy = extract_proxy_details(pac_file_path, target_url)
        if "DIRECT" in proxy:
            proxies = {}
        elif "HTTP" in proxy or "HTTPS" in proxy or "SOCKS" in proxy:
            proxy_split = proxy.split(" ")
            if "://" in "".join(proxy_split[1:]):
                proxies = {
                    'https': "".join(proxy_split[1:])
                }
            else:
                proxies = {
                    'https': str(proxy_split[0]).lower() + "://" + "".join(proxy_split[1:])
                }
        elif "PROXY" in proxy:
            proxy_split = proxy.split(" ")
            if "://" in "".join(proxy_split[1:]):
                proxies = {
                    'https': "".join(proxy_split[1:])
                }
            else:
                proxies = {
                    'https': "http://" + "".join(proxy_split[1:])
                }
        else:
            proxies = {
                'https': proxy
            }
    except Exception as e:
        # logger.error(PAC_PARSE_ERROR.format(pac_file_path, str(e)))  # TODO
        print("some error", PAC_PARSE_ERROR.format(pac_file_path, str(e)))
    PAC_PROXY = proxies
    return proxies
