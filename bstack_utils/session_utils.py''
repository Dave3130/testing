import json
import os
import threading

from bstack_utils.config import Config
from bstack_utils.constants import EVENTS, STAGE
from bstack_utils.helper import create_file_in_directory, get_url_hostname, get_thread_value_or_default, is_private_domain_or_ip, \
    write_object_entry_in_file
from bstack_utils.measure import measure


def bstack_exit_handler(session_drivers):
    for driver in session_drivers:
        try:
            driver.quit()
        except Exception as e:
            pass

@measure(event_name=EVENTS.SDK_AUTOMATE_SESSION_STATUS, stage=STAGE.SINGLE)
def mark_session_status(driver, status, reason=''):
    global_config = Config.get_instance()
    if global_config.should_skip_session_status():
        return

    executor_string = browserstack_executor_helper('setSessionStatus', '', status, reason, '', '')
    driver.execute_script(executor_string)

@measure(event_name=EVENTS.SDK_AUTOMATE_SESSION_STATUS, stage=STAGE.SINGLE)
def mark_pw_session_status(page, status, reason=''):
    try:
        if page is None:
            return

        global_config = Config.get_instance()
        if global_config.should_skip_session_status():
            return

        executor_string = browserstack_executor_helper('setSessionStatus', '', status, reason, '', '')
        page.evaluate("_ => {}", executor_string)
    except Exception as e:
        print("Exception in setting session status for playwright {}", e)


def browserstack_executor_helper(type, name, status, reason, annotate_level, annotate_data):
    # type is one of setSessionName, setSessionStatus, annotate
    executor_object = {
        'action': type,
        'arguments': {}
    }
    if type == 'annotate':
        executor_object['arguments']['level'] = annotate_level
        executor_object['arguments']['data'] = json.dumps(str(annotate_data))
    if type == 'setSessionName':
        executor_object['arguments']['name'] = name
    if type == 'setSessionStatus':
        executor_object['arguments']['status'] = status
        if status == 'failed' and str(reason) != "":
            executor_object['arguments']['reason'] = json.dumps(str(reason))

    browserstack_executor = 'browserstack_executor: {}'.format(json.dumps(executor_object))
    return browserstack_executor


def get_nudge_local_error(url, config, logger, error_in_response=False):
    hostname = get_url_hostname(url)
    is_private = is_private_domain_or_ip(hostname)
    try:
        if is_private or error_in_response:
            file_path = create_file_in_directory('.browserstack', '.bstack-config.json', logger)
            if os.environ.get('BROWSERSTACK_LOCAL_NOT_SET_ERROR') and eval(
                    os.environ.get('BROWSERSTACK_LOCAL_NOT_SET_ERROR')):
                return
            if ('browserstackLocal' in config and not config['browserstackLocal']):
                os.environ['BROWSERSTACK_LOCAL_NOT_SET_ERROR'] = str(True)
                url_host_obj = {'hostname': hostname}
                write_object_entry_in_file('.bstack-config.json', 'nudge_local', url_host_obj, logger)
    except Exception as e:
        pass


def update_caps_for_local(caps, default_local_id):
    # global DEFAULT_LOCAL_ID
    if 'bstack:options' in caps:
        caps['bstack:options']['local'] = True
        if default_local_id:
            caps['bstack:options']['localIdentifier'] = default_local_id
    else:
        caps['browserstack.local'] = True
        if default_local_id:
            caps['browserstack.localIdentifier'] = default_local_id


def store_test_status(test_status):
    current_status = get_thread_value_or_default(threading.current_thread(), 'testStatus', '')
    if current_status == '' or current_status == 'skipped':
        threading.current_thread().testStatus = test_status
    else:
        if test_status == 'failed':
            threading.current_thread().testStatus = test_status
