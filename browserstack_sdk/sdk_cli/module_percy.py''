from typing import Dict, List, Any, Callable, Tuple, Union
from browserstack_sdk import sdk_pb2 as structs
from browserstack_sdk.sdk_cli.module_base import BaseModule
from browserstack_sdk.sdk_cli.automation_framework import (
    AutomationFrameworkState,
    HookState,
    AutomationFrameworkBrowser,
)
from bstack_utils.helper import  get_thread_value_or_default
from browserstack_sdk.sdk_cli.selenium_framework import SeleniumFramework
from browserstack_sdk.sdk_cli.test_framework import TestFramework, TestFrameworkState, TestFrameworkTest, TestHookState, LogEntry
from typing import Tuple, Any
import threading
from bstack_utils.percy_capture_session import PercyCaptureSession
from browserstack_sdk.sdk_cli.module_webdriver_test import WebDriverTestModule
from bstack_utils.percy import Percy
from bstack_utils.percy_sdk import PercySDK
from bstack_utils.constants import *
import re

class PercyModule(BaseModule):

    def __init__(self, percy_config: Dict[str, str]):
        super().__init__()

        self.percy_config = percy_config
        self.percy = Percy()
        self.percy_session = PercyCaptureSession()
        self.set_percy_details()
        SeleniumFramework.set_hook_callback((AutomationFrameworkState.EXECUTE, HookState.PRE), self.on_pre_execute)
        TestFramework.set_hook_callback((TestFrameworkState.TEST, TestHookState.POST), self.on_after_test)

    def is_enabled(self) -> bool:
        return True

    def resolve_test_instance(self, instance: AutomationFrameworkBrowser, driver: object):
        test_instances = TestFramework.get_context_instances(instance.context)

        for t in test_instances:
            driver_instances = TestFramework.get_state(t, WebDriverTestModule.KEY_AUTOMATION_SESSIONS, [])

            if any(instance is d[1] for d in driver_instances) or instance == driver:
                return t

    def on_pre_execute(
        self,
        f: SeleniumFramework,
        driver: object,
        exec: Tuple[AutomationFrameworkBrowser, str],
        hook_info: Tuple[AutomationFrameworkState, HookState],
        result: Any,
        *args,
        **kwargs,
    ):
        try:
            instance, method_name = exec
            if not SeleniumFramework.is_execute_request(method_name):
                return
            platform_index = f.get_state(instance, SeleniumFramework.KEY_PLATFORM_INDEX, 0)
            test_instance = self.resolve_test_instance(instance, driver)
            percy_name = TestFramework.get_state(test_instance, TestFramework.KEY_TEST_RERUN_NAME, None)
            if not percy_name:
                self.logger.debug("on_pre_execute: returning as session is not yet started")
                return
            driver_command = f.parse_command_name(*args)
            for command in PERCY_EVENT_NAME_MAP:
                if command == driver_command:
                    self.try_screenshot(driver, platform_index)

            cap_mode = self.percy.get_percy_capture_mode()
            if driver_command in PERCY_CAPTURE_MODE_MAP[cap_mode]:
                self.percy_session.defer_capture(percy_name, driver_command)
        except Exception as e:
            # dont error out
            self.logger.error("on_pre_execute: error", e)

    def on_after_test(
        self,
        f: TestFramework,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        from bstack_utils.performance_tester import PerformanceTester
        driver_instances = f.get_state(instance, WebDriverTestModule.KEY_AUTOMATION_SESSIONS, [])
        if not driver_instances:
            self.logger.debug(f"on_after_test: no drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        if len(driver_instances) > 1:
            self.logger.debug(f"on_after_test: {len(driver_instances)} drivers for hook_info={hook_info} args={args} kwargs={kwargs}")

        # run scan on the most recent webdriver
        driver_weakref, automation_framework_browser = driver_instances[0]
        driver = driver_weakref()
        if not driver:
            self.logger.debug(f"on_after_test: no driver for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        test_keys = {
            TestFramework.KEY_TEST_NAME: "test name",
            TestFramework.KEY_TEST_UUID: "test uuid",
            TestFramework.KEY_TEST_RERUN_NAME: "test rerun name"
        }
        test_state = { key: f.get_state(instance, key) for key in test_keys }
        missing_keys = [key for key, value in test_state.items() if not value]

        if missing_keys:
            for key in missing_keys:
                self.logger.debug(f"on_after_test: missing {key}")
            return
        
        platform_index = f.get_state(instance, SeleniumFramework.KEY_PLATFORM_INDEX, 0)
        
        if self.percy_config.percy_capture_mode == "testcase":
            percy_test_end_ss_name = test_state.get(TestFramework.KEY_TEST_RERUN_NAME) + "-testcase"
            random_label = PerformanceTester.mark_start(EVENTS.SDK_PERCY_SCREENSHOT.value)
            PercySDK.screenshot(
                driver, 
                percy_test_end_ss_name, 
                testCase=test_state[TestFramework.KEY_TEST_NAME], 
                thTestCaseExecutionId=test_state[TestFramework.KEY_TEST_UUID], 
                platformIndex=platform_index
            )
            PerformanceTester.end(EVENTS.SDK_PERCY_SCREENSHOT.value, random_label+":start", random_label+":end", True, None, None, None, None, test_name=percy_test_end_ss_name)

    def try_screenshot(self, driver, platform_index):
        if self.percy_session.is_capture_empty() is True or self.percy_session.capturing() is True:
            return

        self.percy_session.lock_capture()
        while not self.percy_session.is_capture_empty():
            percy_name = self.percy_session.consume_capture()
            self.take_screenshot(driver, percy_name, platform_index)
        self.percy_session.unlock_capture()

    def take_screenshot(self, driver, ss_name, platform_index, test=None):
        from bstack_utils.performance_tester import PerformanceTester
        random_label = PerformanceTester.mark_start(EVENTS.SDK_PERCY_AUTO_CAPTURE.value)
        if test != None:
            testCase = getattr(test, 'name', None)
            thTestCaseExecutionId = getattr(test, 'uuid', None)
            PercySDK.screenshot(driver, ss_name, testCase=testCase, thTestCaseExecutionId=thTestCaseExecutionId, platformIndex=platform_index)
        else:
            PercySDK.screenshot(driver, ss_name)
        PerformanceTester.end(EVENTS.SDK_PERCY_AUTO_CAPTURE.value, random_label+":start", random_label+":end", True, None, None, None, None, test_name=ss_name)

    def set_percy_details(self):
        os.environ['BROWSERSTACK_PERCY'] = str(self.percy_config.success)
        os.environ['BROWSERSTACK_PERCY_CAPTURE_MODE'] = str(self.percy_config.percy_capture_mode)
        self.percy.set_percy_auto_enable(self.percy_config.is_percy_auto_enabled)
        self.percy.set_percy_build_id(self.percy_config.percy_build_id)
