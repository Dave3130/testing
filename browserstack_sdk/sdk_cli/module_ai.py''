from browserstack_sdk.sdk_cli.module_base import BaseModule
from browserstack_sdk.sdk_cli.automation_framework import (
    AutomationFrameworkState,
    HookState,
    AutomationFrameworkBrowser,
)
from browserstack_sdk.sdk_cli.selenium_framework import SeleniumFramework
from typing import Tuple, Callable, Any
import grpc
from browserstack_sdk import sdk_pb2 as structs
from browserstack_sdk.sdk_cli.module_base import BaseModule
from bstack_utils.measure import measure
from bstack_utils.constants import *
import traceback
import os
import time


class AIModule(BaseModule):
    LOG_DISABLED_SHOWN = False

    def __init__(self):
        super().__init__()
        SeleniumFramework.set_hook_callback((AutomationFrameworkState.EXECUTE, HookState.PRE), self.on_init)

    def is_enabled(self) -> bool:
        return True

    def on_init(
        self,
        f: SeleniumFramework,
        driver: object,
        exec: Tuple[AutomationFrameworkBrowser, str],
        hook_info: Tuple[AutomationFrameworkState, HookState],
        result: Any,
        *args,
        **kwargs,
    ):
        hub_url = f.hub_url(driver)
        if f.is_browserstack_hub(hub_url):
            if not AIModule.LOG_DISABLED_SHOWN:
                self.logger.warning(f"local self-heal flow disabled for BrowserStack infra sessions hub_url={hub_url}")
                AIModule.LOG_DISABLED_SHOWN = True
            return

        command_name = f.parse_command_name(*args)
        command_params = f.parse_command_params(*args)

        if command_name and command_name.lower() == "findelement" and command_params:
            framework_session_id = f.session_id(driver)
            locator_type, locator_value = command_params.get("using", None), command_params.get("value", None)

            if not framework_session_id or not locator_type or not locator_value:
                self.logger.warning(f"{command_name}: missing framework_session_id or args.using={locator_type} or args.value={locator_value}")
                return

            def wrapper_method(driver, wd_method, *args, **kwargs):
                from selenium.common.exceptions import NoSuchElementException

                try:
                    result = wd_method(driver, *args, **kwargs)
                    # success
                    response = self.self_heal_step(
                        framework_session_id=framework_session_id,
                        is_success=True,
                        locator_type=locator_type,
                        locator_value=locator_value,
                    )

                    if response and response.execute_script:
                        driver.execute_script(response.execute_script)
                        self.logger.info(f"success-script: locator_type={locator_type} locator_value={locator_value}")
                    else:
                        self.logger.warning(f"success-no-script: locator_type={locator_type} locator_value={locator_value} response={response}")

                    return result
                except NoSuchElementException as e:
                    locator = (locator_type, locator_value)
                    return self.__apply_self_heal(
                        driver, wd_method, e, framework_session_id, locator, *args, **kwargs
                    )

            wrapper_method.__name__ = command_name
            return wrapper_method

    def __apply_self_heal(
        self,
        driver,
        wd_method: Callable,
        exception,
        framework_session_id: str,
        locator: Tuple[str, str],
        *args,
        **kwargs,
    ):
        try:
            locator_type, locator_value = locator
            # failure, retry
            response = self.self_heal_step(
                framework_session_id=framework_session_id,
                is_success=False,
                locator_type=locator_type,
                locator_value=locator_value,
            )

            if response and response.execute_script:
                driver.execute_script(response.execute_script)
                self.logger.info(f"failure-healing-triggered: locator_type={locator_type} locator_value={locator_value}")
                healing_result = self.self_heal_get_result(
                    framework_session_id=framework_session_id,
                    locator_type=locator_type,
                )
                self.logger.info(f"failure-healing-result: locator_type={locator_type} locator_value={locator_value} healing_result={healing_result}")

                if healing_result.success and args and len(args) > 1:
                    # w00t!
                    args[1].update(
                        {
                            "using": healing_result.locator_type,
                            "value": healing_result.locator_value,
                        }
                    )
                    return wd_method(driver, *args, **kwargs)
                elif os.environ.get("BROWSERSTACK_AI_DEBUG", False):
                    self.logger.info(f"failure-healing-result-missing: sleep(30) letting you inspect the browser extension logs")
                    time.sleep(300)
            else:
                self.logger.warning(f"failure-no-script: locator_type={locator_type} locator_value={locator_value} response={response}")
        except Exception as err:
            self.logger.warning(f"failure-healing-result: error: {err}")

        # raise original error
        raise exception

    @measure(event_name=EVENTS.SDK_AI_SELF_HEAL_STEP, stage=STAGE.SINGLE)
    def self_heal_step(
        self,
        framework_session_id: str,
        is_success: bool,
        locator_type: str,
        locator_value: str,
        platform_index="0",
    ):
        self.ensure_bin_session()
        req = structs.AISelfHealStepRequest()
        req.bin_session_id = self.bin_session_id
        req.platform_index = platform_index
        req.framework_session_id = framework_session_id
        req.is_success = is_success
        # handshake exists between AI-SDK and AI-team to not require projectName, testName for logData/healFailure calls
        # https://github.com/xxshubhamxx/webdriverio_ai/blob/519ff1c20354bde7280b178f010599dde20b3f15/packages/wdio-browserstack-service/src/ai-handler.ts#L83
        req.test_name = ""
        req.locator_type = locator_type
        req.locator_value = locator_value

        try:
            r = self.cli_service.AISelfHealStep(req)
            self.logger.info(f"received from server: {r}")
            # r.framework_session_id
            # r.execute_script
            return r
        except grpc.RpcError as e:
            self.logger.error(f"rpc-error: {e}")
            traceback.print_exc()
            raise e

    @measure(event_name=EVENTS.SDK_AI_SELF_HEAL_GET_RESULT, stage=STAGE.SINGLE)
    def self_heal_get_result(self, framework_session_id: str, locator_type: str, platform_index="0"):
        self.ensure_bin_session()
        req = structs.AISelfHealGetRequest()
        req.bin_session_id = self.bin_session_id
        req.platform_index = platform_index
        req.framework_session_id = framework_session_id
        req.locator_type = locator_type

        try:
            r = self.cli_service.AISelfHealGetResult(req)
            self.logger.info(f"received from server: {r}")
            # r.success
            # r.framework_session_id
            # r.locator_type
            # r.locator_value
            # r.ai_healing
            # r.error
            return r
        except grpc.RpcError as e:
            self.logger.error(f"rpc-error: {e}")
            traceback.print_exc()
            raise e
