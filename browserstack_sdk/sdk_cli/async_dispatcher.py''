import threading
import queue
from typing import Callable, Union


class AsyncDispatcher:
    timeout: int
    job_error_handler: Union[None, Callable]
    queue_error_handler: Union[None, Callable]

    def __init__(self, timeout=1, max_threads=1, job_error_handler=None, queue_error_handler=None):
        self.timeout = timeout
        self.max_threads = max_threads
        self.job_error_handler = job_error_handler
        self.queue_error_handler = queue_error_handler

        self.queue = queue.Queue()
        self.stop_event = threading.Event()
        self.threads = []

    def enqueue(self, job: Callable):
        if not callable(job):
            raise ValueError("invalid job: " + type(job))

        self.queue.put(job)

    def start(self):
        if self.threads:
            return

        self.threads = [threading.Thread(target=self.worker, daemon=True) for _ in range(self.max_threads)]
        for thread in self.threads:
            thread.start()

    def stop(self):
        if not self.threads:
            return

        if not self.queue.empty():
            self.queue.join()

        self.stop_event.set()

        for _ in self.threads:
            self.queue.put(None)

        for thread in self.threads:
            thread.join()

        self.threads.clear()

    def worker(self):
        while not self.stop_event.is_set():
            try:
                job = self.queue.get(block=True, timeout=self.timeout)
                if job is None:
                    break

                try:
                    job()
                except Exception as e:
                    if callable(self.job_error_handler):
                        self.job_error_handler(e, job)
                finally:
                    self.queue.task_done()
            except queue.Empty:
                pass
            except Exception as e:
                if callable(self.queue_error_handler):
                    self.queue_error_handler(e)
