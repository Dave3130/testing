import json
import subprocess
import threading
import time
import sys
import grpc
import os
from browserstack_sdk import sdk_pb2_grpc
from browserstack_sdk import sdk_pb2 as structs
from browserstack_sdk.sdk_cli.async_dispatcher import AsyncDispatcher
from browserstack_sdk.sdk_cli.module_base import BaseModule
from browserstack_sdk.sdk_cli.module_accessibility import AccessibilityModule
from browserstack_sdk.sdk_cli.module_ai import AIModule
from browserstack_sdk.sdk_cli.module_percy import PercyModule
from browserstack_sdk.sdk_cli.module_webdriver import WebDriverModule
from browserstack_sdk.sdk_cli.module_webdriver_test import WebDriverTestModule
from browserstack_sdk.sdk_cli.module_playwright import PlaywrightModule
from browserstack_sdk.sdk_cli.module_playwright_test import PlaywrightTestModule
from browserstack_sdk.sdk_cli.module_event_dispatcher import EventDispatcherModule
from browserstack_sdk.sdk_cli.event_bus import event_bus, Events, ConnectEvent
from browserstack_sdk.sdk_cli.pytest_bdd_framework import PytestBDDFramework
from browserstack_sdk.sdk_cli.pytest_framework import PytestFramework
from browserstack_sdk.sdk_cli.selenium_framework import SeleniumFramework
from browserstack_sdk.sdk_cli.automation_framework import AutomationFramework
from browserstack_sdk.sdk_cli.playwright_framework import PlaywrightFramework
from bstack_utils.helper import Notset, check_and_update_binary, get_cli_dir, get_browserstack_sdk_cli_path, is_pytest_bdd
from browserstack_sdk.sdk_cli.test_framework import TestFramework
from browserstack_sdk.sdk_cli.utils.custom_tag_manager import CustomTagManager
from browserstack_sdk.sdk_cli.utils.file_uploader import FileUploader
from bstack_utils.helper import Notset, check_and_update_binary, get_cli_dir, get_browserstack_sdk_cli_path, is_pytest_bdd, fire_request, is_playwright_installed
from browserstack_sdk.sdk_cli.test_framework import TestFramework, TestFrameworkState, TestFrameworkTest, TestHookState, LogEntry
from browserstack_sdk.sdk_cli.automation_framework import AutomationFrameworkBrowser, AutomationFrameworkState, HookState
from bstack_utils.constants import *
from bstack_utils.api_utils import bstack_api_url
from bstack_utils import logger_utils

from typing import Any, List, Union, Dict
import traceback
from google.protobuf.json_format import MessageToDict
from datetime import datetime, timedelta
from collections import defaultdict
from pathlib import Path
from functools import wraps
from bstack_utils.measure import measure
from bstack_utils.messages import POST_RESPONSE_MESSAGE, FUNNEL_EVENT_REQUEST_ERROR

logger = logger_utils.get_logger(__name__, logger_utils.get_log_level())

def setup_cli_path(bs_config):
    sdk_cli_bin_path = None
    cli_dir = None
    try:
        cli_dir = get_cli_dir()
        sdk_cli_bin_path = get_browserstack_sdk_cli_path(cli_dir)
        updated_binary_path = check_and_update_binary(sdk_cli_bin_path, cli_dir, bs_config)
        sdk_cli_bin_path = updated_binary_path if updated_binary_path else sdk_cli_bin_path
        if not sdk_cli_bin_path:
            raise ValueError("Unable to find SDK_CLI_BIN_PATH")
    except Exception as ex:
        logger.debug("Error while downloading the latest binary {}".format(ex))
        sdk_cli_bin_path = os.environ.get("SDK_CLI_BIN_PATH")
        if sdk_cli_bin_path:
            logger.debug(f"Falling back to SDK_CLI_BIN_PATH from environment: {sdk_cli_bin_path}")
        else:
            logger.debug("No valid SDK_CLI_BIN_PATH found in environment; setup may be incomplete.")
    return sdk_cli_bin_path, cli_dir
SDK_CLI_PORT = "9999"
SDK_CLI_READY_LOGLINE = "ready"

ENV_KEY_BIN_SESSION_ID = "BROWSERSTACK_CLI_BIN_SESSION_ID"
ENV_KEY_BIN_LISTEN_ADDR = "BROWSERSTACK_CLI_BIN_LISTEN_ADDR"
BROWSERSTACK_AUTOMATION = "BROWSERSTACK_AUTOMATION"
ENV_REGEX_MATCH = re.compile(r"(?i).*(BROWSERSTACK|BS).*")
ENV_BROWSERSTACK_CLI_DEV = "development"
ENV_BROWSERSTACK_FORCE_FALLBACK = "BROWSERSTACK_FORCE_FALLBACK"

logs_events = [
    Events.BOOTSTRAP,
    Events.CONNECT,
    Events.SHUTDOWN,
]


class SDKCLI:
    _instance = None

    process: Union[None, Any]
    is_process_ready: bool
    is_main_connected: bool
    is_child_connected: bool
    bin_session_id: Union[None, str]
    cli_bin_session_id: Union[None, str]
    cli_listen_addr: Union[None, str]
    cli_channel: Union[None, grpc.Channel]
    browserstack_binary_path: str
    # cli_service: Union[None, type[sdk_pb2_grpc.SDKStub]]

    test_framework: TestFramework
    automation_framework: AutomationFramework
    session_framework: str

    config: Union[None, Dict[str, Any]]
    event_dispatcher: EventDispatcherModule
    accessibility: AccessibilityModule
    file_uploader: FileUploader
    ai: AIModule
    percy_module: PercyModule
    cli_modules: List[BaseModule]

    # these are protobufs with proper structs but can set typing
    config_testhub: Any
    config_observability: Any
    config_accessibility: Any
    config_percy: Any

    perf_stats: Dict[str, timedelta]
    perf_tag: str

    async_dispatcher: AsyncDispatcher

    def __new__(cls):
        if not cls._instance:
            cls._instance = super(SDKCLI, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        self.process = None
        self.is_process_ready = False
        self.cli_channel = None
        self.cli_service = None
        self.cli_bin_session_id = None
        self.cli_listen_addr = os.environ.get(ENV_KEY_BIN_LISTEN_ADDR, None)
        self.is_main_process = os.environ.get(ENV_KEY_BIN_SESSION_ID, "") == ""
        self.is_main_connected = False
        self.is_child_connected = False
        self.config = None
        self.config_testhub = None
        self.config_observability = None
        self.config_accessibility = None
        self.config_percy = None
        self.test_framework = None
        self.automation_framework = None
        self.browserstack_binary_path=""
        self.session_framework = None

        self.logger = logger_utils.get_logger(self.__class__.__name__, logger_utils.get_log_level())
        self.perf_stats = defaultdict(lambda: timedelta(microseconds=0))
        self.async_dispatcher = AsyncDispatcher()

        self.module_automation_framework = None
        self.module_automation_framework_test = None

        # modules loaded dynamically based on config
        self.event_dispatcher = None
        self.accessibility = None
        self.ai = None
        self.percy = None

        self.cli_modules = []

    def is_browserstack_automation(self):
        return os.environ.get(BROWSERSTACK_AUTOMATION).lower().__eq__("true")

    def is_enabled(self, config):
        if os.environ.get(ENV_BROWSERSTACK_FORCE_FALLBACK, '').lower() in ['true', '1', 'yes']:
            self.logger.debug("Forcing fallback mode due to BROWSERSTACK_FORCE_FALLBACK environment variable")
            os.environ["BROWSERSTACK_BINARY_IS_RUNNING"] = "False"
            return False
        if 'turboScale' in config and str(config['turboScale']).lower() != 'false':
            return False
        enabled_frameworks = ["pytest", "pytest-bdd"]  # Add more frameworks to this list as needed
        is_binary_enabled = config.get("framework") in enabled_frameworks or os.environ.get('FRAMEWORK_USED') in enabled_frameworks
        os.environ["BROWSERSTACK_BINARY_IS_RUNNING"] = str(is_binary_enabled) # Setting ENV VAR to track is binary running
        return is_binary_enabled

    def register_hooks(self):
        for event in logs_events:
            # logs all events
            event_bus.register(
                event, lambda event_name, *args, **kwargs: event_bus.logger.debug(f"{event_name} => {args} {kwargs}")
            )

        event_bus.register(Events.BOOTSTRAP, self.__on_bootstrap)
        event_bus.register(Events.CONNECT, self.__on_connect_child)
        event_bus.register(Events.SHUTDOWN, self.__on_shutdown)
        event_bus.register(Events.EXIT, self.__on_exit)

    def is_child_process(self):
        return not self.is_main_process and os.environ.get(ENV_KEY_BIN_SESSION_ID, "") != ""

    def is_running(self):
        if self.is_main_process:
            return self.is_process_ready
        else:
            return bool(self.cli_channel)

    def is_module_loaded(self, module):
        return any(isinstance(m, module) for m in self.cli_modules) and cli.is_running()

    def __connect(self, timeout_seconds=10):
        if self.cli_service:
            # already connected
            return

        time_start = datetime.now()
        cli_listen_addr = os.environ.get(ENV_KEY_BIN_LISTEN_ADDR, self.cli_listen_addr)
        self.logger.debug(f"[{id(self)}] connecting")

        channel = grpc.insecure_channel(cli_listen_addr, options=[("grpc.enable_http_proxy", 0), ("grpc.enable_https_proxy", 0)])
        grpc.channel_ready_future(channel).result(timeout=timeout_seconds)

        self.cli_channel = channel
        self.cli_service = sdk_pb2_grpc.SDKStub(self.cli_channel)
        self.add_benchmark("grpc:connect", datetime.now() - time_start)

        self.cli_listen_addr = cli_listen_addr
        os.environ[ENV_KEY_BIN_LISTEN_ADDR] = self.cli_listen_addr

        self.logger.debug(f"[{id(self)}] connected: is_child_process={self.is_child_process()}")

    def __on_shutdown(self, event_name):
        if self.is_child_process():
            self.logger.debug("child-process: stopping CLI")

        self.__stop()

    def __on_exit(self, event_name, stack_trace = None, exit_code=1):
        if exit_code == 1:
            self.logger.error("Something went wrong")
        f_path = Path(f"{self.cli_dir}/unhandledErrors.json")
        if self.cli_dir and f_path.exists():
            with open(f_path, 'r', encoding='utf-8') as fp:
                data = json.load(fp)
                try:
                    fire_request('POST', bstack_api_url(FUNNEL_INSTRUMENTATION_API_ENDPOINT), data, {
                        'auth': (self.config['userName'], self.config['accessKey'])
                    })
                except Exception as e:
                    logger.debug(FUNNEL_EVENT_REQUEST_ERROR.format(str(e)))
            f_path.unlink()
        sys.exit(exit_code)

    @measure(event_name=EVENTS.SDK_CLI_ON_BOOTSTRAP, stage=STAGE.SINGLE)
    def __on_bootstrap(self, event_name: str, data):
        from bstack_utils.performance_tester import PerformanceTester
        self.browserstack_binary_path, self.cli_dir = setup_cli_path(data.bs_config)
        os.environ['BROWSERSTACK_WRITABLE_DIR'] = self.cli_dir
        
        if not self.browserstack_binary_path or not self.cli_dir:
            raise ValueError("Unable to find the SDK CLI binary")
        
        if self.is_child_process():
            self.__on_connect_child(event_name, ConnectEvent())
            return

        try:
            PerformanceTester.end(EVENTS.SDK_BS_SETUP.value, EVENTS.SDK_BS_SETUP.value + ":start", EVENTS.SDK_BS_SETUP.value + ":end", status=True, failure=None, test_name=None)
            logger.debug("Complete SDK Setup.")
        except Exception as e:
            logger.debug("Exception while marking key metrics {}".format(e))
        start = datetime.now()
        is_started = self.__start()
        self.add_benchmark("spawn_time", datetime.now() - start)
        # self.logger.warning(f"[{id(self)}] main-process: spawn_time={datetime.now() - start}")

        if is_started:
            start = datetime.now()
            self.__connect()
            self.add_benchmark("connect_time", datetime.now() - start)
            # self.logger.warning(f"[{id(self)}] main-process: connect_time={datetime.now() - start}")

            start = datetime.now()
            self.__start_bin_session(data)
            self.add_benchmark("start_session_time", datetime.now() - start)
            # self.logger.warning(f"[{id(self)}] main-process: start_session_time={datetime.now() - start}")

    @measure(event_name=EVENTS.SDK_CLI_ON_CONNECT, stage=STAGE.SINGLE)
    def __on_connect_child(self, event_name: str, data: ConnectEvent):
        if not self.is_child_process():
            self.logger.debug("failed to connect: not a child-process")
            return

        bin_session_id = os.environ.get(ENV_KEY_BIN_SESSION_ID)
        start = datetime.now()
        self.__connect()  # will throw if connection fails
        self.add_benchmark("connect_time", datetime.now() - start)
        # self.logger.warning(f"[{id(self)}] child-process: connect_time={datetime.now() - start}")

        self.cli_bin_session_id = bin_session_id
        self.logger.debug(f"[{id(self)}] child-process: connected to existing CLI {bin_session_id}")

        start = datetime.now()
        self.__connect_bin_session()
        self.add_benchmark("start_session_time", datetime.now() - start)
        # self.logger.warning(f"[{id(self)}] child-process: start_session_time={datetime.now() - start}")

    def __configure_modules(self):
        if not self.cli_service or not self.cli_bin_session_id:
            self.logger.debug("cannot configure modules")
            return

        framework_modules = {
            "playwright": (PlaywrightModule, PlaywrightTestModule, PlaywrightFramework),
            "selenium": (WebDriverModule, WebDriverTestModule, SeleniumFramework),
        }

        if not self.module_automation_framework and self.session_framework in framework_modules:
            module_automation, module_automation_test, module_framework = framework_modules[self.session_framework]
            module_automation_test_instance = module_automation_test()
            self.module_automation_framework_test = module_automation_test_instance
            self.module_automation_framework = module_framework

            self.cli_modules.append(module_automation_test_instance)
            self.cli_modules.append(module_automation(self.module_automation_framework_test))
  
        
        if not self.event_dispatcher and self.config_observability and self.config_observability.success: # false
            self.event_dispatcher = EventDispatcherModule(self.module_automation_framework, self.module_automation_framework_test) # Observability
            self.cli_modules.append(self.event_dispatcher)

        if not self.accessibility and self.config_accessibility and self.config_accessibility.success:
            self.accessibility = AccessibilityModule(self.module_automation_framework, self.module_automation_framework_test)
            self.cli_modules.append(self.accessibility)

        if not self.ai and isinstance(self.config, dict) and self.config.get("selfHeal", False) == True:
            self.ai = AIModule()
            self.cli_modules.append(self.ai)

        if not self.percy and self.config_percy and self.config_percy.success:
            self.percy = PercyModule(self.config_percy)
            self.cli_modules.append(self.percy)

        for mod in self.cli_modules:
            if not mod.is_configured():
                mod.configure(self.cli_service, self.config, self.cli_bin_session_id, self.async_dispatcher)

    def __unconfigure_modules(self):
        for mod in self.cli_modules:
            if mod.is_configured():
                mod.configure(self.cli_service, None, None, None)

    @measure(event_name=EVENTS.SDK_START_BIN_SESSION, stage=STAGE.SINGLE)
    def __start_bin_session(self, data):
        if not self.cli_bin_session_id or self.is_main_connected:
            return

        self.__add_detected_frameworks(data)
        time_start = datetime.now()
        req = structs.StartBinSessionRequest()
        req.bin_session_id = self.cli_bin_session_id
        req.path_project = os.getcwd()
        req.language = "python"
        req.sdk_language = "python"
        req.path_config = data.path_config
        req.sdk_version = data.sdk_version
        req.test_framework = data.test_framework
        req.frameworks.extend(data.frameworks)
        req.framework_versions.update(data.framework_versions)
        req.env_vars.update({key: value for key, value in os.environ.items() if bool(ENV_REGEX_MATCH.search(key))})
        req.cli_args.extend(sys.argv)
        # print(req)

        try:
            self.logger.debug(f"[{id(self)}] main-process: start_bin_session")
            r = self.cli_service.StartBinSession(req)
            self.add_benchmark("grpc:start_bin_session", datetime.now() - time_start)
            # self.logger.info(f'received from server: {r}')
            os.environ[ENV_KEY_BIN_SESSION_ID] = r.bin_session_id
            self.__load_bin_response(r)
            self.__configure_modules()

            self.async_dispatcher.start()
            self.is_main_connected = True
            self.logger.debug(f"[{id(self)}] main-process: connected")
        except grpc.FutureTimeoutError as timeoutError:
            self.logger.error(f"[{id(self)}] timeoeut-error: {timeoutError}")
            traceback.print_exc()
            raise timeoutError
        except grpc.RpcError as e:
            self.logger.error(f"[{id(self)}] rpc-error: {e}")
            traceback.print_exc()
            raise e

    @measure(event_name=EVENTS.SDK_CONNECT_BIN_SESSION, stage=STAGE.SINGLE)
    def __connect_bin_session(self):
        if not self.is_child_process() or not self.cli_bin_session_id or self.is_child_connected:
            return

        time_start = datetime.now()
        req = structs.ConnectBinSessionRequest()
        req.bin_session_id = self.cli_bin_session_id
        req.platform_index = int(os.environ.get('BROWSERSTACK_PLATFORM_INDEX', '0'))

        try:
            self.logger.debug(f"[{id(self)}] child-process: connect_bin_session")
            r = self.cli_service.ConnectBinSession(req)
            self.add_benchmark("grpc:connect_bin_session", datetime.now() - time_start)
            # self.logger.warning(f'received from server: {r}')

            self.__load_bin_response(r)
            self.__configure_modules()

            self.async_dispatcher.start()
            self.is_child_connected = True
            self.logger.debug(f"[{id(self)}] child-process: connected")
        except grpc.FutureTimeoutError as timeoutError:
            self.logger.error(f"[{id(self)}] timeoeut-error: {timeoutError}")
            traceback.print_exc()
            raise timeoutError
        except grpc.RpcError as e:
            self.logger.error(f"[{id(self)}] rpc-error: {e}")
            traceback.print_exc()
            raise e

    def __load_bin_response(self, r):
        self.handle_testhub_errors(r)
        if not r.bin_session_id or not r.config or not isinstance(r.config, str):
            raise ValueError("unexpected server response" + str(r))

        self.config = json.loads(r.config)
        if not self.config:
            raise ValueError("empty config found")
        self.session_framework = r.session_framework
        self.config_testhub = r.testhub
        # os.environ['BROWSERSTACK_TESTHUB_JWT'] = r.testhub.jwt
        self.config_observability = r.observability
        self.config_accessibility = r.accessibility
        """
        Percy is sent only as part of the "ConnectBinSession," and this function is also used by StartBinSession.
        Therefore, None handling is implemented.
        """
        self.config_percy = getattr(r, 'percy', None)
        self.cli_bin_session_id = r.bin_session_id
        os.environ['BROWSERSTACK_TESTHUB_JWT'] = self.config_testhub.jwt
        os.environ['BROWSERSTACK_TESTHUB_UUID'] = self.config_testhub.build_hashed_id

    def measure_if_not_ready(event_name: EVENTS, stage: STAGE):
        def decorator(func):
            @wraps(func)
            def wrapper(self, *args, **kwargs):
                if self.is_process_ready:
                    return func(self, *args, **kwargs)
                @measure(event_name=event_name, stage=stage)
                def measured(*a, **kw):
                    return func(self, *a, **kw)
                return measured(*args, **kwargs)
            return wrapper
        return decorator

    @measure_if_not_ready(event_name=EVENTS.SDK_CLI_START, stage=STAGE.SINGLE)
    def __start(self, timeout_seconds=10):
        if self.is_process_ready:
            self.logger.debug("start: already running")
            return True

        self.logger.debug("start")

        if os.getenv("BROWSERSTACK_CLI_ENV") == ENV_BROWSERSTACK_CLI_DEV:
            self.cli_bin_session_id = ENV_BROWSERSTACK_CLI_DEV
            self.cli_listen_addr = "unix:/tmp/sdk-platform-%s.sock" % (self.cli_bin_session_id)
            self.is_process_ready = True
            return True

        self.process = subprocess.Popen(
            [self.browserstack_binary_path, "sdk"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            env=dict(os.environ),
            text=True,
            universal_newlines=True, # backward compat for text=True in older python
            encoding="utf-8",
            bufsize=1,  # line buffering
            close_fds=True,
        )

        stdout_reader = threading.Thread(target=self.__wait_until_ready, args=(timeout_seconds,))
        stdout_reader.start()
        stdout_reader.join()

        if self.process.returncode is not None:
            # TODO: fix logging
            self.logger.debug(f"[{id(self)}] spawn: returncode={self.process.returncode} out={self.process.stdout.read()} err={self.process.stderr.read()}")

        if not self.is_process_ready:
            self.logger.debug(f"[{id(self)}] cleanup")
            self.__stop()

        self.logger.debug(f"[{id(self)}] process_ready: {self.is_process_ready}")
        return self.is_process_ready

    def __wait_until_ready(self, timeout_secs=10):
        begin_time_secs = time.time()

        while self.process and time.time() - begin_time_secs < timeout_secs:
            try:
                line = self.process.stdout.readline()
                if "id=" in line:
                    self.cli_bin_session_id = line.split("id=")[-1:][0].strip()
                    self.logger.debug(f"cli_bin_session_id:{self.cli_bin_session_id}")
                    continue

                if "listen=" in line:
                    self.cli_listen_addr = line.split("listen=")[-1:][0].strip()
                    self.logger.debug(f"cli_listen_addr:{self.cli_listen_addr}")
                    continue

                if "port=" in line:
                    port = line.split("port=")[-1:][0].strip()
                    self.logger.debug(f"port:{port}")
                    continue

                if line.strip() == SDK_CLI_READY_LOGLINE and self.cli_bin_session_id and self.cli_listen_addr:
                    if os.getenv("SDK_CLI_FLAG_IO_STREAM", "1") == "1":
                        # we no longer need these so we close them
                        # CLI/std* writer may receive EPIPE for broken pipe stream, which it should handle
                        # keeping these open may lead to a deadlock (maybe not in node.js CLI but still)
                        if not self.process.stdout.closed:
                            self.process.stdout.close()

                        if not self.process.stderr.closed:
                            self.process.stderr.close()

                    self.is_process_ready = True
                    return True
            except Exception as e:
                self.logger.debug(f"error: {e}")
        return False

    @measure(event_name=EVENTS.SDK_CLI_ON_STOP, stage=STAGE.SINGLE)
    def __stop(self):
        if self.cli_channel:
            self.async_dispatcher.stop()

            start = datetime.now()
            if self.stop_bin_session():
                self.cli_bin_session_id = None
                if self.is_child_connected:
                    self.add_benchmark("stop_session_time", datetime.now() - start)
                    # self.logger.warning(f"child-process: stop_session_time={datetime.now() - start}")
                else:
                    self.add_benchmark("stop_session_time", datetime.now() - start)
                    # self.logger.warning(f"main-process: stop_session_time={datetime.now() - start}")

            self.__unconfigure_modules()
            start = datetime.now()
            self.cli_channel.close()
            self.add_benchmark("disconnect_time", datetime.now() - start)
            # self.logger.warning(f"main-process: disconnect_time={datetime.now() - start}")
            self.cli_channel = None

        if self.process:
            self.logger.debug("stop")
            start = datetime.now()
            self.process.terminate()
            self.add_benchmark("kill_time", datetime.now() - start)
            # self.logger.warning(f"main-process: kill_time={datetime.now() - start}")
            self.process = None

            if self.is_main_process and self.config_observability and self.config_testhub and self.config_testhub.testhub_events:
                self.print_report()
                self.logger.info(
                    "Visit https://automation.browserstack.com/builds/{} to view build report, insights, and many more debugging information all at one place!\n".format(
                        self.config_testhub.build_hashed_id
                    )
                )
                os.environ['BS_TESTOPS_BUILD_HASHED_ID'] = self.config_testhub.build_hashed_id

        self.is_process_ready = False

    def __add_detected_frameworks(self, data):
        try:
            import selenium

            data.framework_versions["selenium"] = selenium.__version__
            data.frameworks.append("selenium")
        except:
            pass

        try:            
            from playwright._repo_version import __version__

            data.framework_versions["playwright"] = __version__
            data.frameworks.append("playwright")
        except:
            pass

    def setup_selenium(self, hub_url: str, platform_index: int, create_options_from_caps: Any):
        if self.automation_framework:
            self.logger.debug("skipped setup selenium: already set up")
            return

        try:
            time_start = datetime.now()
            import selenium
            from selenium.webdriver.remote.webdriver import WebDriver
            from selenium.webdriver.common.service import Service

            framework = "selenium"
            self.automation_framework = SeleniumFramework(
                cli.config.get("hubUrl", hub_url),
                platform_index,
                framework_name=framework,
                framework_version=selenium.__version__,
                classes=[WebDriver],
                helper_methods={"create_options_from_caps": create_options_from_caps}
            )

            def do_nothing(self):
                return

            if self.config.get("browserstackAutomation", True):
                Service.start = do_nothing
                Service.stop = do_nothing

            def get_accessibility_results(driver):
                if self.accessibility and self.accessibility.is_enabled():
                    return self.accessibility.get_accessibility_results(driver, framework_name=framework)

            def get_accessibility_results_summary(driver):
                if self.accessibility and self.accessibility.is_enabled():
                    return self.accessibility.get_accessibility_results_summary(driver, framework_name=framework)

            def perform_scan(driver):
                if self.accessibility and self.accessibility.is_enabled():
                    return self.accessibility.perform_scan(driver, method=None, framework_name=framework)

            WebDriver.getAccessibilityResults = get_accessibility_results
            WebDriver.get_accessibility_results = get_accessibility_results
            WebDriver.getAccessibilityResultsSummary = get_accessibility_results_summary
            WebDriver.get_accessibility_results_summary = get_accessibility_results_summary
            WebDriver.upload_attachment = staticmethod(FileUploader.upload_attachment)
            WebDriver.set_custom_tag = staticmethod(CustomTagManager.set_custom_tag)
            WebDriver.performScan = perform_scan
            WebDriver.perform_scan = perform_scan

            self.add_benchmark("setup_selenium", datetime.now() - time_start)
        except Exception as e:
            self.logger.error(f"failed to setup selenium: {e}")

    def setup_playwright(self, platform_index: int):
        try:
            from playwright.sync_api import BrowserType
            from playwright.sync_api import BrowserContext
            from playwright._impl._connection import Connection
            from playwright._repo_version import __version__

            from bstack_utils.helper import mod_playwright_connect
            self.automation_framework = PlaywrightFramework(
                platform_index,
                framework_name="playwright",
                framework_version=__version__,
                classes=[BrowserType, BrowserContext, Connection],
            )
        except Exception as e:
            self.logger.error(f"failed to setup playwright: {e}")
            pass
    
    def setup_test_framework(self):
        if self.test_framework:
            self.logger.debug("skipped setup pytest: already set up")
            return
        
        if is_pytest_bdd():
            import pytest
            self.test_framework = PytestBDDFramework({ "pytest": pytest.__version__ }, ["pytest-bdd"], self.async_dispatcher, self.cli_service)
            return
        try:
            import pytest
            self.test_framework = PytestFramework({ "pytest": pytest.__version__ }, ["pytest"], self.async_dispatcher, self.cli_service)
        except Exception as e:
            self.logger.error(f"failed to setup pytest: {e}")

        self.patch_pytest_selenium_methods()

    def patch_pytest_selenium_methods(self):
        if not self.is_browserstack_automation():
            return

        orig_pytest_get_option = None

        def mod_pytest_report_header(config, startdir):
            return "driver: {0}".format("BrowserStack")

        def mod_pytest_bstack_makereport():
            # we are skipping pytest_selenium method that mark status
            # as we are using our plugin for that, this was causing 2 calls for session status
            return

        def mod_pytest_get_option(self, name: str, default=Notset(), skip: bool = False):
            if str(name).lower() == 'driver':
                return "BrowserStack"
            else:
                return orig_pytest_get_option(self, name, default, skip)

        try:
            # TODO: PERCY to be handled in Phase 3
            # if percy.is_percy() == "true":
            #   SeleniumPatch(selenium_handler_for_percy)
            from pytest_selenium import pytest_selenium
            from _pytest.config import Config
            orig_pytest_get_option = Config.getoption

            pytest_selenium.pytest_report_header = mod_pytest_report_header
            from pytest_selenium.drivers import browserstack
            browserstack.pytest_selenium_runtest_makereport = mod_pytest_bstack_makereport
            Config.getoption = mod_pytest_get_option
        except Exception as e:
            self.logger.error(f"Failed to patch pytest selenium for browserstack: {e}")

    def get_testhub_config(self):
        response_data = MessageToDict(cli.config_testhub, preserving_proto_field_name=True)
        if isinstance(response_data, dict):
            if cli.config_observability:
                response_data.update(
                    {"observability": MessageToDict(cli.config_observability, preserving_proto_field_name=True)}
                )

            if cli.config_accessibility:
                accessibility = MessageToDict(cli.config_accessibility, preserving_proto_field_name=True)

                # grpc issue for accessibility.options.commandsToWrap field that isn't following Python convention
                if isinstance(accessibility, dict) and "commands_to_wrap" in accessibility.get("options", {}):
                    accessibility_options = accessibility.get("options")
                    accessibility_options.update({ "commandsToWrap": accessibility_options.pop("commands_to_wrap") })

                response_data.update({"accessibility": accessibility })
        return response_data

    @measure(event_name=EVENTS.SDK_ON_STOP, stage=STAGE.SINGLE)
    def stop_bin_session(self, exit_signal: str = None, exit_reason: str = None, exit_code: int = None):
        if not self.cli_bin_session_id or not self.cli_service:
            return

        time_start = datetime.now()
        req = structs.StopBinSessionRequest()
        req.bin_session_id = self.cli_bin_session_id

        if exit_code:
            req.exit_code = exit_code
        if exit_signal:
            req.exit_signal = exit_signal
        if exit_reason:
            req.exit_reason = exit_reason

        try:
            r = self.cli_service.StopBinSession(req)

            SDKCLI.automate_buildlink = r.automate_buildlink
            SDKCLI.hashed_id = r.hashed_id
            
            self.add_benchmark("grpc:stop_bin_session", datetime.now() - time_start)
            # self.logger.debug(f"stop_bin_session: received from server: {r}")
            return r.success
        except grpc.RpcError as e:
            # self.logger.error(f"rpc-error: {e}")
            traceback.print_exc()
            raise e

    def add_benchmark(self, key: str, value: timedelta):
        tag = "child-process" if self.is_child_process() else "main-process"
        self.perf_stats[":".join([tag + "-" + str(id(self)), key])] += value

    def print_report(self):
        if not os.getenv("DEBUG_PERF", "0") == "1":
            return

        benchmark_report = dict()
        instances = []

        if self.test_framework:
            instances.extend(list(self.test_framework.instances.values()))

        if self.automation_framework:
            instances.extend(list(self.automation_framework.instances.values()))

        for instance in instances:
            if not instance.platform_index in benchmark_report:
                benchmark_report[instance.platform_index] = defaultdict(lambda: timedelta(microseconds=0))

            report = benchmark_report[instance.platform_index]
            for k, v in instance.get_benchmarks().items():
                report[k] += v
                report[k.split(":")[0]] += v

        cli_entries = sorted([(k, v) for k, v in self.perf_stats.items()], key=lambda o: o[1], reverse=True)
        total_cli = 0
        for r in cli_entries:
            time_seconds = r[1].total_seconds()
            total_cli += time_seconds
            self.logger.debug(f"[perf] cli:{r[0]}={time_seconds}")

        self.logger.debug("--")
        report_entries = []
        for platform_index, report in benchmark_report.items():
            report_entries.extend([(platform_index, k, v) for k, v in report.items()])

        report_entries.sort(key=lambda o: o[2], reverse=True)
        platforms = set()
        time_platform = 0

        for r in report_entries:
            time_seconds = r[2].total_seconds()
            time_platform += time_seconds
            platforms.add(r[0])
            self.logger.debug(f"[perf] test:platform-{r[0]}:{r[1]}={time_seconds}")

        if self.is_child_process():
            self.logger.debug("--")
            self.logger.debug(f"[perf] cli:child-process={total_cli} test:platforms-{str(platforms)}={time_platform}")
        else:
            self.logger.debug(f"[perf] cli:main-process={total_cli}")
        self.logger.debug("--")

    def test_orchestration_session(self, test_files: list, orchestration_strategy: str, orchestration_metadata: str):
        request = structs.TestOrchestrationRequest(
            bin_session_id=self.cli_bin_session_id,
            orchestration_strategy=orchestration_strategy,
            test_files=test_files,
            orchestration_metadata=orchestration_metadata
        )
        if not self.cli_service:
            self.logger.error("cli_service is not initialized. Cannot perform test orchestration.")
            return None
        response = self.cli_service.TestOrchestration(request)
        self.logger.debug("test-orchestration-session={}".format(response))
        if response.success:
            return list(response.ordered_test_files)
        return None
    
    def handle_testhub_errors(self, r):
        if r is not None and getattr(r, 'testhub', None) and getattr(r.testhub, 'errors', None):
            errors = json.loads(r.testhub.errors.decode("utf-8"))
            for err_key, err in errors.items():
                if err['type'] == 'info':
                    self.logger.info(err['message'])
                else:
                    self.logger.error(err['message'])

    def get_build_details(self):
        return SDKCLI.automate_buildlink, SDKCLI.hashed_id

cli = SDKCLI()

