import logging
from enum import Enum
import os
import threading
import traceback
from typing import Dict, List, Any, Callable, Tuple, Union
import abc
from datetime import datetime, timezone
from dataclasses import dataclass

from browserstack_sdk.sdk_cli.async_dispatcher import AsyncDispatcher
from browserstack_sdk.sdk_cli.tracked_instance import TrackedInstance, TrackedContext


class TestHookState(Enum):
    PRE = 0
    POST = 1

    def __repr__(self) -> str:
        return "TestHookState.{}".format(self.name)


class TestFrameworkState(Enum):
    NONE = 0
    BEFORE_ALL = 1
    LOG = 2
    SETUP_FIXTURE = 3
    INIT_TEST = 4
    BEFORE_EACH = 5
    AFTER_EACH = 6
    TEST = 7
    STEP = 8
    LOG_REPORT = 9
    AFTER_ALL = 10

    def __eq__(self, other):
        if self.__class__ is other.__class__:
            return self.value == other.value
        return NotImplemented

    def __lt__(self, other):
        if self.__class__ is other.__class__:
            return self.value < other.value
        return NotImplemented

    def __repr__(self) -> str:
        return "TestFrameworkState.{}".format(self.name)


class TestFrameworkTest(TrackedInstance):
    test_frameworks: List[str]
    test_framework_versions: Dict[str, str]
    state: TestFrameworkState
    created_at: datetime
    updated_at: datetime

    def __init__(
        self,
        context: TrackedContext,
        test_frameworks: List[str],
        test_framework_versions: Dict[str, str],
        state=TestFrameworkState.NONE,
    ):
        super().__init__(context)
        self.test_frameworks = test_frameworks
        self.test_framework_versions = test_framework_versions
        self.state = state
        self.created_at = datetime.now(tz=timezone.utc)
        self.updated_at = datetime.now(tz=timezone.utc)

    def set_state(self, next_state: TestFrameworkState):
        next_state_name = TestFrameworkState(next_state).name
        if not next_state_name:
            # invalid state
            return False

        if next_state == self.state:
            # nothing to do
            return False

        # TODO: validate next_state
        self.state = next_state
        self.updated_at = datetime.now(tz=timezone.utc)
        return True


@dataclass
class TestFrameworkContext:
    test_framework_name: str
    test_framework_version: str
    platform_index: int

@dataclass
class LogEntry:
    kind: str
    message: str
    level: Union[None, str] = None
    timestamp: Union[None, datetime] = datetime.now(tz=timezone.utc)
    fileName: str = None
    fileSize: int = None
    attachmentType: str = None
    filePath: str = None
    test_run_uuid: str = None
    build_run_uuid: str = None
    hook_run_uuid: str = None

class TestFramework(abc.ABC):
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    KEY_TEST_UUID = "test_uuid"
    KEY_TEST_ID = "test_id"
    KEY_TEST_NAME = "test_name"
    KEY_TEST_FILE_PATH = "test_file_path"
    KEY_TEST_TAGS = "test_tags"
    KEY_TEST_RESULT = "test_result"
    KEY_TEST_RESULT_AT = "test_result_at"
    KEY_TEST_STARTED_AT = "test_started_at"
    KEY_TEST_ENDED_AT = "test_ended_at"
    KEY_TEST_LOCATION = "test_location"
    KEY_TEST_FRAMEWORK_NAME = "test_framework_name"
    KEY_TEST_FRAMEWORK_VERSION = "test_framework_version"
    KEY_TEST_CODE = "test_code"
    KEY_TEST_RERUN_NAME = "test_rerun_name"
    KEY_PLATFORM_INDEX = "platform_index"
    KEY_TEST_FAILURE = "test_failure"
    KEY_TEST_FAILURE_TYPE = "test_failure_type"
    KEY_TEST_LOGS = "test_logs"
    KEY_TEST_META = "test_meta"
    KEY_TEST_SCOPES = 'test_scopes'

    KEY_AUTOMATE_SESSION_NAME = "automate_session_name"

    KEY_EVENT_STARTED_AT = "event_started_at"
    KEY_EVENT_ENDED_AT = "event_ended_at"

    KEY_HOOK_ID = "hook_id"
    KEY_HOOK_RESULT = "hook_result"
    KEY_HOOK_LOGS = "hook_logs"
    KEY_HOOK_NAME = "hook_name"
    ATTACHMENT_LOGS = "logs"
    KEY_CUSTOM_TAGS = "custom_metadata"

    DEFAULT_TEST_RESULT = "pending"
    DEFAULT_HOOK_RESULT = "pending"

    KIND_SCREENSHOT = "TEST_SCREENSHOT"
    KIND_LOG = "TEST_LOG"
    KIND_ATTACHMENT = "TEST_ATTACHMENT"

    instances: Dict[str, TestFrameworkTest] = dict()
    hook_regsitry: Dict[str, List[Callable]] = dict()

    test_frameworks: List[str]
    test_framework_versions: Dict[str, str]

    def __init__(
        self,
        test_frameworks: List[str],
        test_framework_versions: Dict[str, str],
        async_dispatcher: AsyncDispatcher
    ):
        self.test_frameworks = test_frameworks
        self.test_framework_versions = test_framework_versions
        self.async_dispatcher = async_dispatcher

    def track_event(
        self,
        context: TestFrameworkContext,
        test_framework_state: TestFrameworkState,
        test_hook_state: TestHookState,
        *args,
        **kwargs,
    ):
        self.logger.debug("track_event: test_framework_state={} test_hook_state={} args={} kwargs={}".format(test_framework_state,test_hook_state,args,kwargs))

    def run_hooks(
        self,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        hook_registry_key = TestFramework.hook_info_to_registry_key(hook_info)
        # call all registered hooks eligible for this event
        if not hook_registry_key in TestFramework.hook_regsitry:
            return

        self.logger.debug("invoking {} callbacks".format(len(TestFramework.hook_regsitry[hook_registry_key])))
        for callback in TestFramework.hook_regsitry[hook_registry_key]:
            try:
                callback(self, instance, hook_info, *args, **kwargs)
            except Exception as e:
                self.logger.error("error invoking callback: {}".format(e))
                traceback.print_exc()

    @abc.abstractmethod
    def is_pytest_framework(self):
        return

    @abc.abstractmethod
    def get_log_entries(self, instance, hook_info):
        return

    @abc.abstractmethod
    def clear_logs(self, instance, hook_info):
        return

    @staticmethod
    def get_tracked_instance(target: object, strict=True):
        if target is None:
            return None

        ctx = TrackedInstance.create_context(target)
        instance = TestFramework.instances.get(ctx.id, None)

        if instance and instance.is_tracked_instance(target):
            # passed strict=True
            return instance

        return instance if instance and not strict else None

    @staticmethod
    def get_current_instances(reverse=True) -> List[TestFrameworkTest]:
        thread_id = threading.get_ident()
        process_id = os.getpid()

        return sorted(
            filter(
                lambda t: t.context.thread_id == thread_id
                and t.context.process_id == process_id,
                TestFramework.instances.values(),
            ),
            key=lambda t: t.created_at,
            reverse=reverse,
        )

    @staticmethod
    def get_context_instances(ctx: TrackedContext, reverse=True) -> List[TestFrameworkTest]:
        return sorted(
            filter(
                lambda t: t.context.thread_id == ctx.thread_id
                and t.context.process_id == ctx.process_id,
                TestFramework.instances.values(),
            ),
            key=lambda t: t.created_at,
            reverse=reverse,
        )

    @staticmethod
    def has_state(instance: TestFrameworkTest, key: str):
        return instance and key in instance.data

    @staticmethod
    def get_state(instance: TestFrameworkTest, key: str, default_value=None):
        return instance.data.get(key, default_value) if instance else default_value

    @staticmethod
    def set_state(instance: TestFrameworkTest, key: str, value: Any):
        TestFramework.logger.debug("set_state: instance={} key={} value={}".format(instance.ref(),key,value))
        instance.data[key] = value
        return True

    @staticmethod
    def set_state_entries(instance: TestFrameworkTest, entries: Dict[str, Any]):
        TestFramework.logger.debug("set_state_entries: instance={} entries={}".format(instance.ref(),entries,))
        instance.data.update(entries)
        return True

    @staticmethod
    def update_state(instance: TestFrameworkState, key: str, value: Any):
        TestFramework.logger.debug("update_state: instance={} key={} value={}".format(instance.ref(),key,value))
        instance.data.update(key, value)
        return True

    @staticmethod
    def get_data(key: str, target: object, strict=True, default_value=None):
        instance = TestFramework.get_tracked_instance(target, strict)
        return TestFramework.get_state(instance, key, default_value)

    @staticmethod
    def set_data(key: str, value: Any, target: object, strict=True):
        instance = TestFramework.get_tracked_instance(target, strict)
        if not instance:
            return False

        instance.data[key] = value
        return True

    @staticmethod
    def set_data_with_instance(instance: TestFrameworkTest, key: str, value: object):
        if instance == None:
            return
        instance.data[key] = value

    @staticmethod
    def get_data_with_instance(instance: TestFrameworkTest, key: str):
        return instance.data[key]

    @staticmethod
    def hook_info_to_registry_key(hook_info: Tuple[TestFrameworkState, TestHookState]):
        return ":".join((TestFrameworkState(hook_info[0]).name, TestHookState(hook_info[1]).name))

    @staticmethod
    def set_hook_callback(hook_info: Tuple[TestFrameworkState, TestHookState], callback: Callable):
        hook_registry_key = TestFramework.hook_info_to_registry_key(hook_info)
        TestFramework.logger.debug("set_hook_callback: hook_registry_key={}".format(hook_registry_key))

        if not hook_registry_key in TestFramework.hook_regsitry:
            TestFramework.hook_regsitry[hook_registry_key] = []

        TestFramework.hook_regsitry[hook_registry_key].append(callback)

    @staticmethod
    def object_fqcn(o):
        klass = o.__class__
        module = klass.__module__
        if module == "builtins":
            return klass.__qualname__  # avoid outputs like 'builtins.str'
        return module + "." + klass.__qualname__

    @staticmethod
    def extract_keys(obj, keys, default_value=None):
        return {k: getattr(obj, k, default_value) for k in keys}
