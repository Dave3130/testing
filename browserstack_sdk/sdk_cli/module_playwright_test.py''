import json
import time
import os
import threading
import asyncio
from browserstack_sdk.sdk_cli.automation_framework import (
    AutomationFrameworkState,
    HookState,
    AutomationFrameworkBrowser,
    TrackedContext,
)
from typing import Tuple, Dict, Any, List, Union
from bstack_utils.helper import is_bstack_automation, is_pytest_bdd
from browserstack_sdk.sdk_cli.selenium_framework import SeleniumFramework
from browserstack_sdk.sdk_cli.test_framework import TestFramework, TestFrameworkState, TestHookState, TestFrameworkTest
from browserstack_sdk.sdk_cli.playwright_framework import PlaywrightFramework
from browserstack_sdk.sdk_cli.module_base_browserstack_remote import BaseBrowserStackRemoteModule
from typing import Tuple, List, Any
from bstack_utils.session_utils import browserstack_executor_helper, mark_session_status, mark_pw_session_status
from browserstack_sdk import sdk_pb2 as structs

# Associates test cases to webdrivers
class PlaywrightTestModule(BaseBrowserStackRemoteModule):
    KEY_DRIVERS = "test_drivers"
    KEY_AUTOMATION_SESSIONS = "automation_sessions"
    KEY_NON_BROWSERSTACK_AUTOMATION_SESSIONS = "non_browserstack_automation_sessions"
    KEY_TEST_SESSIONS = "test_sessions"
    KEY_AUTOMATION_INSTANCE_REFS = "automation_instance_refs"
    KEY_CBT_SESSION_CREATED = "cbt_session_created"
    KEY_CBT_SESSION_NAME = "cbt_session_name"
    KEY_CBT_SESSION_STATUS = "cbt_session_status"

    def __init__(self):
        super().__init__(tracking_key=self.KEY_DRIVERS, frameworks=[SeleniumFramework.NAME])

        if not self.is_enabled():
            return

        TestFramework.set_hook_callback((TestFrameworkState.BEFORE_EACH, TestHookState.POST), self.set_active_pages)
        if is_pytest_bdd():
            TestFramework.set_hook_callback((TestFrameworkState.TEST, TestHookState.POST), self.on_before_test)
        else:
            TestFramework.set_hook_callback((TestFrameworkState.TEST, TestHookState.PRE), self.on_before_test)
        TestFramework.set_hook_callback((TestFrameworkState.TEST, TestHookState.POST), self.on_after_test)

    def is_enabled(self) -> bool:
        return True

    def set_active_pages(
        self,
        f: TestFramework,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        page_instances = self.active_automation_pages(instance.context)
        if not page_instances:
            self.logger.debug(f"set_active_page: no page for hook_info={hook_info}")
            return
        f.set_state(instance, PlaywrightTestModule.KEY_AUTOMATION_SESSIONS, page_instances)


    def active_automation_pages(self, context: TrackedContext, browserstack_pages= True):
        if browserstack_pages:
            page_instances = self.resolve_drivers(context, reverse=True)
        else:
            page_instances = self.resolve_non_browserstack_drivers(context, reverse=True)
        return [f for f in page_instances if f[1].state != AutomationFrameworkState.QUIT]

    def on_before_test(
        self,
        f: TestFramework,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        self.set_active_pages(f, instance, hook_info, *args, **kwargs)
        if not is_bstack_automation:
            self.logger.debug(f"on_before_test: not browserstack session for hook_info={hook_info} args={args} kwargs={kwargs}")
            return
        page_instances = f.get_state(instance, PlaywrightTestModule.KEY_AUTOMATION_SESSIONS, [])
        if not page_instances:
            self.logger.debug(f"on_before_test: no drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
            return
        if len(page_instances) > 1:
            self.logger.debug(
                f"on_before_test: {len(page_instances)} drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
        page_weakref, automation_framework_browser = page_instances[0]
        page = page_weakref()
        if not page:
            self.logger.debug(f"on_before_test: no page for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        session_name = getattr(args[0], "nodeid", None)
        from browserstack_sdk.sdk_cli.cli import cli
        if not cli.config.get("testContextOptions").get("skipSessionName"):
            try:
                page.evaluate("_ => {}",
                            'browserstack_executor: {"action": "setSessionName", "arguments": {"name":' + json.dumps(
                                session_name) + "}}")
            except Exception as e:
                self.logger.debug("exception in playwright session name {}", e)
    def on_after_test(
        self,
        f: TestFramework,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        self.set_active_pages(f, instance, hook_info, *args, **kwargs)
        if not is_bstack_automation:
            self.logger.debug(f"on_before_test: not browserstack session for hook_info={hook_info} args={args} kwargs={kwargs}")
            return
        page_instances = f.get_state(instance, PlaywrightTestModule.KEY_AUTOMATION_SESSIONS, [])
        if not page_instances:
            self.logger.debug(f"on_before_test: no drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
            return
        if len(page_instances) > 1:
            self.logger.debug(
                f"on_before_test: {len(page_instances)} drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
        page_weakref, automation_framework_browser = page_instances[0]
        page = page_weakref()
        if not page:
            self.logger.debug(f"on_before_test: no page for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        status = f.get_state(instance, TestFramework.KEY_TEST_RESULT, None)
        if not status:
            self.logger.debug(f"no status for test, hook_info={hook_info}")
            return

        test_context_argument = {"status": status.lower()}
        failure_reason = f.get_state(instance, TestFramework.KEY_TEST_FAILURE, None)

        if status.lower() == 'failed' and failure_reason is not None:
            test_context_argument['reason'] = failure_reason[0]['backtrace'][0] if isinstance(failure_reason, list) else str(failure_reason)
        from browserstack_sdk.sdk_cli.cli import cli
        if not cli.config.get("testContextOptions").get("skipSessionStatus"):    
            try:
                page.evaluate(
                        "_ => {}",
                        'browserstack_executor: {"action": "setSessionStatus", "arguments": ' 
                        + json.dumps(test_context_argument) 
                        + "}"
                    )
            except Exception as e:
                self.logger.debug("exception in playwright session status {}", e)
    def mark_o11y_sync(
        self, 
        instance: TestFrameworkTest, 
        f: TestFramework,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        self.set_active_pages(f, instance, hook_info, *args, **kwargs)
        if not is_bstack_automation:
            self.logger.debug(
                f"mark_o11y_sync: not browserstack session, hook_info={hook_info} args={args} kwargs={kwargs}")
            return
        page_instances = f.get_state(instance, PlaywrightTestModule.KEY_AUTOMATION_SESSIONS, [])
        if not page_instances:
            self.logger.debug(f"on_before_test: no drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
            return
        if len(page_instances) > 1:
            self.logger.debug(
                f"on_before_test: {len(page_instances)} drivers for hook_info={hook_info} args={args} kwargs={kwargs}")
        page_weakref, automation_framework_browser = page_instances[0]
        page = page_weakref()
        if not page:
            self.logger.debug(f"mark_o11y_sync: no page for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        timestamp = int(time.time() * 1000)
        data = "ObservabilitySync:" + str(timestamp)

        try:
            page.evaluate(
                "_ => {}",
                'browserstack_executor: {}'.format(
                    json.dumps(
                        {
                            "action": "annotate",
                            "arguments": {
                                "type": "Annotation",
                                "data": data,
                                "level": "debug"
                            }
                        }
                    )
                )
            )
        except Exception as e:
            self.logger.debug("exception in playwright o11y annotation marking {}", e)

    def get_cbt_event(
        self, 
        instance: TestFrameworkTest, 
        f: TestFramework,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs,
    ):
        self.set_active_pages(f, instance, hook_info, *args, **kwargs)
        if f.get_state(instance, PlaywrightTestModule.KEY_CBT_SESSION_CREATED, False):
            return
        self.ensure_bin_session()
        req = structs.TestSessionEventRequest()
        req.bin_session_id = self.bin_session_id
        req.platform_index = TestFramework.get_state(instance, TestFramework.KEY_PLATFORM_INDEX)
        req.test_framework_name = TestFramework.get_state(instance, TestFramework.KEY_TEST_FRAMEWORK_NAME)
        req.test_framework_version = TestFramework.get_state(instance, TestFramework.KEY_TEST_FRAMEWORK_VERSION)
        req.test_framework_state = hook_info[0].name
        req.test_hook_state = hook_info[1].name
        req.test_uuid = TestFramework.get_state(instance, TestFramework.KEY_TEST_UUID)
        for browser_instances in PlaywrightFramework.instances.values():
            session = req.automation_sessions.add()
            session.provider = (
                "browserstack"
                if is_bstack_automation
                else "unknown_grid"
            )
            session.ref = browser_instances.ref()
            session.hub_url = PlaywrightFramework.get_state(browser_instances, PlaywrightFramework.KEY_HUB_URL, "")
            session.framework_name = browser_instances.framework_name
            session.framework_version = browser_instances.framework_version
            session.framework_session_id = PlaywrightFramework.get_state(browser_instances, PlaywrightFramework.KEY_FRAMEWORK_SESSION_ID, "")

        req.execution_context.hash = str(instance.context.hash)
        req.execution_context.thread_id = str(instance.context.thread_id)
        req.execution_context.process_id = str(instance.context.process_id)
        return req

    def get_automation_driver(
        self,
        f: TestFramework,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs
    ):
        page_instances = f.get_state(instance, PlaywrightTestModule.KEY_AUTOMATION_SESSIONS, [])

        if not page_instances:
            self.logger.debug(f"get_automation_driver: no pages for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        if len(page_instances) > 1:
            self.logger.debug(f"get_automation_driver: {len(page_instances)} drivers for hook_info={hook_info} args={args} kwargs={kwargs}")

        # run scan on the most recent webdriver
        page_weakref, automation_framework_browser = page_instances[0]
        page = page_weakref()
        if not page:
            self.logger.debug(f"get_automation_driver: no page for hook_info={hook_info} args={args} kwargs={kwargs}")
            return

        return page

    def generate_platform_details(
        self,
        f: TestFramework,
        instance: TestFrameworkTest,
        hook_info: Tuple[TestFrameworkState, TestHookState],
        *args,
        **kwargs
    ):
        caps = {}
        platform_details = {}
        for browser_instances in PlaywrightFramework.instances.values():
            caps = PlaywrightFramework.get_state(browser_instances, PlaywrightFramework.KEY_CAPABILITIES, "")
        platform_details["browserName"] = caps.get("browser", "")
        platform_details["platformName"] = caps.get("os", "")
        platform_details["platformVersion"] = caps.get("os_version", "")
        platform_details["browserVersion"] = caps.get("browser_version", "")

        return platform_details

    def a11y_script_execute(self, page: object, script_code, args={}):
        try:
            script_template = """(function (...bstackSdkArgs) {{
                return new Promise((resolve, reject) => {{
                    bstackSdkArgs.push(resolve);
                    {fn_body}
                }});
            }})({arg_json})"""
            script_code = script_code.replace("arguments", "bstackSdkArgs")
            script = script_template.format(fn_body=script_code, arg_json=json.dumps(args))
            return page.evaluate(script)
        except Exception as e:
            self.logger.error(f"a11y_script_execute: Error executing the a11y script, {e}")
